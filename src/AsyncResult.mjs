// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";

function ok(value) {
  return Promise.resolve({
              TAG: /* Ok */0,
              _0: value
            });
}

function error(value) {
  return Promise.resolve({
              TAG: /* Error */1,
              _0: value
            });
}

function fromPromise(promise, mapError) {
  return promise.then(function (result) {
                return {
                        TAG: /* Ok */0,
                        _0: result
                      };
              }).catch(function (error) {
              return {
                      TAG: /* Error */1,
                      _0: Curry._1(mapError, error)
                    };
            });
}

function fromResult(result) {
  return Promise.resolve(result);
}

function map(ar, fn) {
  return ar.then(Curry.__1(fn));
}

function mapOk(ar, fn) {
  return ar.then(function (result) {
              if (result.TAG === /* Ok */0) {
                return {
                        TAG: /* Ok */0,
                        _0: Curry._1(fn, result._0)
                      };
              } else {
                return ar;
              }
            });
}

function mapError(ar, fn) {
  return ar.then(function (result) {
              if (result.TAG === /* Ok */0) {
                return ar;
              } else {
                return {
                        TAG: /* Error */1,
                        _0: Curry._1(fn, result._0)
                      };
              }
            });
}

function flatMap(ar, fn) {
  return ar.then(Curry.__1(fn));
}

function flatMapOk(ar, fn) {
  return ar.then(function (result) {
              if (result.TAG === /* Ok */0) {
                return Curry._1(fn, result._0);
              } else {
                return ar;
              }
            });
}

function flatMapError(ar, fn) {
  return ar.then(function (result) {
              if (result.TAG === /* Ok */0) {
                return ar;
              } else {
                return Curry._1(fn, result._0);
              }
            });
}

function tap(ar, fn) {
  return ar.then(function (result) {
              Curry._1(fn, result);
              return ar;
            });
}

function tapOk(ar, fn) {
  return ar.then(function (result) {
              if (result.TAG === /* Ok */0) {
                Curry._1(fn, result._0);
              }
              return ar;
            });
}

function tapError(ar, fn) {
  return ar.then(function (result) {
              if (result.TAG !== /* Ok */0) {
                Curry._1(fn, result._0);
              }
              return ar;
            });
}

function forEach(ar, fn) {
  tap(ar, fn);
}

function forEachOk(ar, fn) {
  tapOk(ar, fn);
}

function forEachError(ar, fn) {
  tapError(ar, fn);
}

export {
  ok ,
  error ,
  fromPromise ,
  fromResult ,
  map ,
  mapOk ,
  mapError ,
  flatMap ,
  flatMapOk ,
  flatMapError ,
  tap ,
  tapOk ,
  tapError ,
  forEach ,
  forEachOk ,
  forEachError ,
}
/* No side effect */
